apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.5.201505241946"
}

android {
    publishNonDefault true
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.android.tasktodo"
        multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }


    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }
    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            try {
                storeFile file("../prod.keystore.jks")
                storePassword KEYSTORE_PASSWORD
                keyAlias 'ProductionKeyStore'
                keyPassword KEYSTORE_PASSWORD
            } catch (ignored) {
                throw new InvalidUserDataException(
                        "You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            useProguard false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            debuggable true
            testCoverageEnabled = true
        }
    }

    flavorDimensions "full"
    productFlavors {
        dev {
            dimension "full"
        }
        prod {
            dimension "full"
            def versionPropsFile = file('version.properties')
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
                versionCode code
            } else {
                throw new GradleException("Could not read version.properties!")
            }
        }
        staging {
            dimension "full"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = [
                    '../libs'
            ]

            res.srcDirs = [
                    'src/main/res'
            ]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def flavor = variant.productFlavors[0].name.capitalize()
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format('ddMMyy')
            def buildType = variant.variantData.variantConfiguration.buildType.name
            outputFileName = "Sample_${flavor}_${buildType}_${versionName}.${versionCode}_${formattedDate}.apk"
        }
    }
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

dependencies {
    implementation project(':presentation')
    implementation project(':domain')
    implementation project(':data')
    implementation project(':remote')
    def mobileUiDependencies = rootProject.ext.mobileUiDependencies
    def mobileUiTestDependencies = rootProject.ext.mobileUiTestDependencies

    implementation mobileUiDependencies.javaxAnnotation

    implementation mobileUiDependencies.kotlin
    implementation mobileUiDependencies.javaxInject
    implementation mobileUiDependencies.rxKotlin
    implementation mobileUiDependencies.androidAnnotations
    implementation mobileUiDependencies.androidSupportV4
    implementation mobileUiDependencies.androidSupportV13
    implementation mobileUiDependencies.appCompatV7
    implementation mobileUiDependencies.supportRecyclerView
    implementation mobileUiDependencies.supportDesign
    implementation mobileUiDependencies.timber
    implementation mobileUiDependencies.rxAndroid
    implementation mobileUiDependencies.glide
    implementation mobileUiDependencies.butterknife
    implementation(mobileUiDependencies.koinAndroid) {
        exclude group: 'com.android.support'
    }
    implementation(mobileUiDependencies.koinScope) {
        exclude group: 'com.android.support'
    }
    implementation(mobileUiDependencies.koinViewModel) {
        exclude group: 'com.android.support'
    }
    implementation "android.arch.lifecycle:runtime:1.1.1"

    testImplementation mobileUiTestDependencies.kotlinJUnit

    compileOnly mobileUiDependencies.glassfishAnnotation

    // Instrumentation test dependencies
    androidTestImplementation mobileUiTestDependencies.junit
    androidTestImplementation mobileUiTestDependencies.mockito
    androidTestImplementation mobileUiTestDependencies.mockitoAndroid
    androidTestImplementation(mobileUiTestDependencies.espressoCore) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.androidRunner) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.androidRules) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.espressoContrib) {
        exclude module: 'appcompat'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
}
//apply plugin: 'com.google.gms.google-services'
